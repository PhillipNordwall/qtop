#!/usr/bin/env python

# Masking/clipping functionality:
# How high should the earliest node number be 
# (e.g. 50), to make the previous WNs vanish
MIN_MASKING_THRESHOLD = 9

# OutputDirs = []

HOMEPATH = os.path.expanduser('~/')
#OUTPUTPATH = os.path.expanduser('~/qtop-input/outputs/')
QTOPPATH = os.path.expanduser('~/qtop/qtop')
PROGDIR = os.path.expanduser('~/off/qtop')
SOURCEDIR = options.SOURCEDIR # as set by the '-s' switch

# SAVEDIR = os.path.expanduser('~/qtop-input/results')




# the following three lines save the produced YAML files in the dataset folder each time
PBSNODES_YAML_FILE = 'pbsnodes.yaml'
QSTATQ_YAML_FILE = 'qstat-q.yaml'
QSTAT_YAML_FILE = 'qstat.yaml'

# The following three lines save the produced YAML files
# in the current qtop dir instead of saving each time in the dataset folder
# PBSNODES_YAML_FILE = HOMEPATH + 'qt/pbsnodes.yaml'
# QSTATQ_YAML_FILE = HOMEPATH + 'qt/qstat-q.yaml'
# QSTAT_YAML_FILE = HOMEPATH + 'qt/qstat.yaml'
DIFFERENT_QSTAT_FORMAT_FLAG = 0 

# if not os.path.exists(SAVEDIR):
#     cmd = 'mkdir ' + SAVEDIR
#     fp = os.popen(cmd)   # create dir ~/qtop-input/results if it doesn't
#                          # exist already

# IDs of unix accounts, for the lower part of qtop
POSSIBLE_IDS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'

# empty_yaml_files()

# os.chdir(OUTPUTPATH)
# OutputDirs += glob.glob('sfragk*')
# OutputDirs += glob.glob('fotis*')
# OutputDirs += glob.glob('gef*')

dir = SOURCEDIR

os.chdir(dir)

# Location of read and created files
PBSNODES_ORIG_FILE = [f for f in os.listdir(os.getcwd()) if f.startswith('pbsnodes') and not f.endswith('.yaml')][0]
QSTATQ_ORIG_FILE = [f for f in os.listdir(os.getcwd()) if (f.startswith('qstat_q') or f.startswith('qstatq') or f.startswith('qstat-q') and not f.endswith('.yaml'))][0]
QSTAT_ORIG_FILE = [f for f in os.listdir(os.getcwd()) if f.startswith('qstat.') and not f.endswith('.yaml')][0]
#PBSNODES_ORIG_FILE = 'pbsnodes.out'
#QSTATQ_ORIG_FILE = 'qstat-q.out'
#QSTAT_ORIG_FILE = 'qstat.out'

reset_yaml_files()
yamlstream1 = open(PBSNODES_YAML_FILE, 'a')
yamlstream2 = open(QSTATQ_YAML_FILE, 'a')
yamlstream3 = open(QSTAT_YAML_FILE, 'a')

if not os.path.getsize(PBSNODES_ORIG_FILE) > 0:  
    print 'Bailing out... Not yet ready for Sun Grid Engine clusters'
    os.chdir(HOMEPATH + 'qt')
    sys.exit(0)
    # os.chdir('..')
    # continue
else:
    fin1 = open(PBSNODES_ORIG_FILE, 'r')
make_pbsnodes_yaml(fin1, yamlstream1)
yamlstream1 = open(PBSNODES_YAML_FILE, 'r')
read_pbsnodes_yaml(yamlstream1)
yamlstream1.close()

if not os.path.getsize(QSTATQ_ORIG_FILE) > 0:  
    print 'Your ' + QSTATQ_ORIG_FILE + ' file is empty! Please check your directory. Exiting ...'
    os.chdir(HOMEPATH + 'qt')
    sys.exit(0)
    # os.chdir('..')
    # continue
else:
    fin2 = open(QSTATQ_ORIG_FILE, 'r')
make_qstatq_yaml(fin2, yamlstream2)
fin2.close()
yamlstream2.close()

if not os.path.getsize(QSTAT_ORIG_FILE) > 0:  
    print 'Your ' + QSTAT_ORIG_FILE + ' file is empty! Please check your directory. Exiting ...'
    os.chdir(HOMEPATH + 'qt')
    sys.exit(0)
    # os.chdir('..')
    # continue
else:
    fin3 = open(QSTAT_ORIG_FILE, 'r')
make_qstat_yaml(fin3, yamlstream3)
fin3.close()
yamlstream3.close()
# print dir

read_qstat()
os.chdir(dir)
dir = os.getcwd()
# print 'your current DIR is now: ', dir  #####DEBUGPRINT2